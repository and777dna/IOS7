#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

print_help()
{
  echo "Usage:"
  echo "       tradelog [-h|--help]"
  echo "       tradelog [FILTER...] [COMMAND] [LOG...]"
  echo "FILTER:"
  echo "        -a [DATETIME],      after: jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data)"
  echo "                            DATETIME je formátu YYYY-MM-DD HH:MM:SS. "
  echo "        -a [DATETIME],      before: jsou uvažovány pouze záznamy PŘED tímto datem (bez tohoto data)."
  echo "        -t [TICKER],        jsou uvažovány pouze záznamy odpovídající danému tickeru."
  echo "                            Při více výskytech přepínače se bere množina všech uvedených tickerů."
  echo "        -w [WIDTH],         u výpisu grafů nastavuje jejich šířku, tedy délku nejdelšího řádku na WIDTH."
  echo "                            Tedy, WIDTH musí být kladné celé číslo. Více výskytů přepínače je chybné spuštění."
  echo "COMMAND:"
  echo "         list-tick,         --výpis seznamu vyskytujících se burzovních symbolů, tzv. tickerů."
  echo "         profit,            -–výpis celkového zisku z uzavřených pozic."
  echo "         pos,               –-výpis hodnot aktuálně držených pozic seřazených sestupně dle hodnoty."
  echo "         last-price,        –-výpis poslední známé ceny pro každý ticker."
  echo "         hist-ord,          –-výpis histogramu počtu transakcí dle tickeru."
  echo "         graph-pos,         –-výpis grafu hodnot držených pozic dle tickeru."
  echo ""
  echo ""
}

COMMAND=""
LOG_FILES=""
GZ_LOG_FILES=""
profit="0.00"
SIRKA=""
WIDTH="1"
MAX_NUMBER="0"
FTICKER=""
number_of_commands="0"
w_number="0"
log_number="0"
max_number_last_price="0"
AFILTER=""
BFILTER=""

#parse arguments

if [ "$#" -lt 1 ] ; then
  echo >&2 "ILLEGAL NUMBER OF ARGUMENTS"
  echo >&2 "./tradelog [ -h|--help] for help"
  exit 1
fi


while [ "$#" -gt 0 ]; do
  case "$1" in
  list-tick)
  COMMAND="$1"
  number_of_commands=$((number_of_commands+1))
  shift
  ;;
  pos)
  COMMAND="$1"
  number_of_commands=$((number_of_commands+1))
  shift
  ;;
  profit)
  COMMAND="$1"
  number_of_commands=$((number_of_commands+1))
  shift
  ;;
  last-price)
  COMMAND="$1"
  number_of_commands=$((number_of_commands+1))
  shift
  ;;
  hist-ord)
  COMMAND="$1"
  number_of_commands=$((number_of_commands+1))
  shift
  ;;
  graph-pos)
  COMMAND="$1"
  number_of_commands=$((number_of_commands+1))
  shift
  ;;
  -h)
    print_help
    exit 0
    ;;
  -w)
    SIRKA="$1"
    WIDTH="$2"
    w_number=$((w_number+1))
    shift
    shift
    ;;
  -t)
    FTICKER="$1"
    TICKER="$2;$TICKER"
    shift
    shift
    ;;
  -a)
    AFILTER="$1"
    AFTER_TIME="$2"
    shift
    shift
    ;;
  -b)
    BFILTER="$1"
    BEFORE_TIME="$2"
    shift
    shift
    ;;
  *)
    if [ "$1" = *.gz ]; then
      if [ -r "$1" ] ; then
      GZ_LOG_FILES="$1
      $GZ_LOG_FILES"
      log_number=$((log_number+1))
      READ_INPUT=$(gzip -d -c $GZ_LOG_FILES)
      else
      echo >&2 "nevalidni file"
      echo >&2 "./tradelog [ -h|--help] for help"
      exit 1
      fi
    else
      if [ -r "$1" ] ; then
      LOG_FILES="$1
      $LOG_FILES"
      log_number=$((log_number+1))
      READ_INPUT=$(cat $LOG_FILES)
      else
      echo >&2 "nevalidni file"
      echo >&2 "./tradelog [ -h|--help] for help"
      exit 1
      fi
    fi
    shift
    ;;
  esac
done

#check chybove hlaseni and parse through filter

if [ "$log_number" -gt 0 ] ; then
  READ_INPUT=$( echo "$READ_INPUT" )
else READ_INPUT=$(cat)
fi

FILTER=$(echo "$READ_INPUT")

if [ "$AFILTER" = "-a" ] ; then
  if [ ${#AFTER_TIME} -gt 19 ] ; then
    echo >&2 "nevalidni format datumu"
    echo >&2 "./tradelog [ -h|--help] for help"
    exit 1
    else FILTER=$(echo "$FILTER" | awk -F ";" -v AFTER_TIME="$AFTER_TIME" '{if ($1 > AFTER_TIME){print $0}}')
  fi
  if [ "${#AFTER_TIME}" -lt 19 ] ; then
    echo >&2 "nevalidni format datumu"
    echo >&2 "./tradelog [ -h|--help] for help"
    exit 1
    else FILTER=$(echo "$FILTER" | awk -F ";" -v AFTER_TIME="$AFTER_TIME" '{if ($1 > AFTER_TIME){print $0}}')
  fi
fi

if [ "$BFILTER" = "-b" ] ; then
  if [ "${#BEFORE_TIME}" -gt 19 ] ; then
    echo >&2 "nevalidni format datumu"
    echo >&2 "./tradelog [ -h|--help] for help"
    exit 1
    else FILTER=$(echo "$FILTER" | awk -F ";" -v BEFORE_TIME="$BEFORE_TIME" '{if ($1 < BEFORE_TIME){print $0}}')
  fi
  if [ "${#BEFORE_TIME}" -lt 19 ] ; then
    echo >&2 "nevalidni format datumu"
    echo >&2 "./tradelog [ -h|--help] for help"
    exit 1
    else FILTER=$(echo "$FILTER" | awk -F ";" -v BEFORE_TIME="$BEFORE_TIME" '{if ($1 < BEFORE_TIME){print $0}}')
  fi
fi

if [ "$FTICKER" = "-t" ] ; then
  FILTER=$(echo "$FILTER" | awk -F ';' -v TICKER="$TICKER" '(TICKER ~ $2 ";") {print $0}')
fi

if [ "$number_of_commands" -gt 1 ] ; then
  echo >&2 "you can write only 1 command"
  echo >&2 "./tradelog [ -h|--help] for help"
  exit 1
fi

if [ "$w_number" -gt 1 ] ; then
  echo >&2 "you can write only 1 width"
  echo >&2 "./tradelog [ -h|--help] for help"
  exit 1
fi

if [ 0 -gt "$WIDTH" ] ; then
  echo >&2 "width must be positive number"
  echo >&2 "./tradelog [ -h|--help] for help"
  exit 1
fi

#parse through command

if [ "$COMMAND" = "list-tick" ] ; then
  READ_FILTERED=$(echo "$FILTER" | awk -F ';' '{ print $2 }' | sort | uniq)
  echo "$READ_FILTERED"
  exit 0
fi

if [ "$COMMAND" = "last-price" ] ; then
  max_number_last_price=$(echo "$FILTER" | awk 'BEGIN{FS=OFS=";"} { if (a[$2]<$1) {a[$2]=$1; data[$2]=$0} } END {for (i in a) print data[i]}' | awk -F ';' 'BEGIN{max=0} {if($4>max) max=$4} END{ print max}')
  READ_FILTERED=$(echo "$FILTER" | awk 'BEGIN{FS=OFS=";"} { if (a[$2]<$1) {a[$2]=$1; data[$2]=$0} } END {for (i in a) print data[i]}' | awk -F ';' -v max_number_last_price=${#max_number_last_price} '{printf "%-9s : %*.2f\n", $2,max_number_last_price, $4}' | sort)
  echo "$READ_FILTERED"
  exit 0
fi

if [ "$COMMAND" = "pos" ] ; then
  max_number_last_price=$(echo "$FILTER" | awk -F ';' ' {if($3 == "sell"){arr[$2]-=$6;  data[$2]=$4; ata[$2]=$2  }else if($3 == "buy"){arr[$2]+=$6;  data[$2]=$4; ata[$2]=$2   } } END {for (i in arr) {printf "%-10s :%.2f\n",ata[i], data[i]*arr[i]}}' | awk -F ":" 'BEGIN{max=0} {if($2>max) max=$2} END{ print ((max+1))}')
  READ_FILTERED=$(echo "$FILTER" | awk -F ';' -v max_number_last_price=${#max_number_last_price} '{if($3 == "sell"){arr[$2]-=$6;  data[$2]=$4; ata[$2]=$2  }else if($3 == "buy"){arr[$2]+=$6; data[$2]=$4; ata[$2]=$2} } END {for (i in arr) {printf "%-9s : %*.2f\n",ata[i],max_number_last_price, data[i]*arr[i]}}' | sort -t ":" -k 2,2 -nr)
  echo "$READ_FILTERED"
  exit 0
fi

if [ "$COMMAND" = "profit" ] ; then
  READ_FILTERED=$(echo "$FILTER" | awk -F ';' -v profit=$profit '{ if($3 == "sell") { profit+=$4*$6 }else{profit-=$4*$6} } END {printf("%.2f", profit)}' )
  echo "$READ_FILTERED"
  exit 0
fi

if [ "$COMMAND" = "hist-ord" ] ; then
  if [ "$SIRKA" = "-w" ] ; then
    MAX_NUMBER=$(echo "$FILTER" | awk -F ';' '{ print $2 }' | sort | uniq -c | awk 'BEGIN {max = 0} {if ($1>max) max=$1} END{print max}' )
    READ_FILTERED=$(echo "$FILTER" | awk -F ';' '{ print $2 }' | sort | uniq -c | awk -v MAX_NUMBER="$MAX_NUMBER" -v WIDTH="$WIDTH" '{printf "%-9s : ",$2; if(0<$1*WIDTH/MAX_NUMBER)for(j=0; j < $1*WIDTH/MAX_NUMBER; j++){ printf "%s","#";}printf "\n"; }')
    echo "$READ_FILTERED"
    exit 0
  fi
  READ_FILTERED=$(echo "$FILTER" | awk -F ';' '{ print $2 }' | sort | uniq -c | awk '{printf "%-9s : ",$2;for(j=0; j < $1; j++){ printf "%s","#";} printf "\n";} ')
  echo "$READ_FILTERED"
  exit 0
fi

if [ "$COMMAND" = "graph-pos" ] ; then
  if [ "$SIRKA" = "-w" ] ; then
    MAX_NUMBER=$(echo "$FILTER" | awk -F ';' ' {if($3 == "sell"){arr[$2]-=$6;  data[$2]=$4; ata[$2]=$2  }else if($3 == "buy"){arr[$2]+=$6;  data[$2]=$4; ata[$2]=$2   } } END {for (i in arr) {printf "%-10s : %.2f\n",ata[i], data[i]*arr[i]}}' | awk -F ':' 'BEGIN{max=0} {{$2<0?$2*-1:$2}if($2>max) max=$2} END{ print max}')
    READ_FILTERED=$(echo "$FILTER" | awk -F ';' -v MAX_NUMBER="$MAX_NUMBER" -v WIDTH="$WIDTH" '{if($3 == "sell"){arr[$2]-=$6;  data[$2]=$4; ata[$2]=$2  }else if($3 == "buy"){arr[$2]+=$6;  data[$2]=$4; ata[$2]=$2   } } END {for (i in arr) {printf "%-10s: ",ata[i]; if(1<arr[i]*data[i]*WIDTH/MAX_NUMBER)for(j=1; j < ((data[i]*arr[i]*WIDTH/MAX_NUMBER+0.0000001)); j++){ printf "%s","#";}else if(-1>arr[i]*data[i]*WIDTH/MAX_NUMBER)for(j=-1; j > ((data[i]*arr[i]*WIDTH/MAX_NUMBER-0.000001)); j--){ printf "%s","!";} printf "\n";}}' | sort | sed 's/ *$//')
    echo "$READ_FILTERED"
    exit 0
  fi
  READ_FILTERED=$(echo "$FILTER" | awk -F ';' ' {if($3 == "sell"){arr[$2]-=$6;  data[$2]=$4; ata[$2]=$2  }else if($3 == "buy"){arr[$2]+=$6;  data[$2]=$4; ata[$2]=$2   } } END {for (i in arr) {printf "%-10s",ata[i]; if(0<data[i]*arr[i]/1000)for(j=1; j < data[i]*arr[i]/1000; j++){ printf "%s","#";} printf "\n";if(0>data[i]*arr[i]/1000)for(j=1; j > data[i]*arr[i]/1000; j--){ printf "%s","!";} printf "\n";}}')
  echo "$READ_FILTERED"
  exit 0
fi

echo "$FILTER"
